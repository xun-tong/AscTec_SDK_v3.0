   1              		.file	"mpc_ref.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	ref_compute_Qh_x_ref
  13              	ref_compute_Qh_x_ref:
  14              	.LFB5:
  15              		.file 1 "mpc_ref.c"
   1:mpc_ref.c     **** #include "mpc_ref.h"
   2:mpc_ref.c     **** #include "mpc_inc.h"
   3:mpc_ref.c     **** #include "mpc_const.h"
   4:mpc_ref.c     **** 
   5:mpc_ref.c     **** /* Declaration of static functions */
   6:mpc_ref.c     **** void ref_compute_Rh_u_ref(struct mpc_ctl *ctl,
   7:mpc_ref.c     **** 		real_t Rh_u_ref[], const real_t u_ref[]);
   8:mpc_ref.c     **** void ref_compute_Qh_x_ref(struct mpc_ctl *ctl,
   9:mpc_ref.c     **** 		real_t Qh_x_ref[], const real_t x_ref[]);
  10:mpc_ref.c     **** 
  11:mpc_ref.c     **** /* Definition of external functions */
  12:mpc_ref.c     **** 
  13:mpc_ref.c     **** /* Compute gradient vector over Lipschitz for the given state and reference */
  14:mpc_ref.c     **** void ref_compute_gxoL(struct mpc_ctl *ctl, const real_t x[], 
  15:mpc_ref.c     **** 						const real_t x_ref[], const real_t u_ref[])
  16:mpc_ref.c     **** {
  17:mpc_ref.c     **** 	static real_t GoL_x[MPC_HOR_INPUTS];
  18:mpc_ref.c     **** 
  19:mpc_ref.c     **** 	ref_compute_groL(ctl, x_ref, u_ref);
  20:mpc_ref.c     **** 	mtx_multiply_mtx_vec(GoL_x, ctl->alm->fgm->GoL, x, MPC_HOR_INPUTS, MPC_STATES);
  21:mpc_ref.c     **** 	mtx_substract(ctl->alm->fgm->gxoL, GoL_x, ctl->alm->fgm->groL, 
  22:mpc_ref.c     **** 					MPC_HOR_INPUTS, 1);
  23:mpc_ref.c     **** 	return;
  24:mpc_ref.c     **** }
  25:mpc_ref.c     **** 
  26:mpc_ref.c     **** /* Compute gradient vector (over Lipschitz) component for the given reference */ 
  27:mpc_ref.c     **** void ref_compute_groL(struct mpc_ctl *ctl,
  28:mpc_ref.c     **** 					 const real_t x_ref[], const real_t u_ref[])
  29:mpc_ref.c     **** {
  30:mpc_ref.c     **** 	static real_t Rh_u_ref[MPC_HOR_INPUTS];  /* Rh * u_ref */
  31:mpc_ref.c     **** 	static real_t Qh_x_ref[MPC_HOR_STATES];  /* Qh * x_ref */
  32:mpc_ref.c     **** 	static real_t Bh_T_Qh_x_ref[MPC_HOR_INPUTS];  /* Bh.T * Qh * x_ref */
  33:mpc_ref.c     **** 	static real_t gr[MPC_HOR_INPUTS];  /* gradient vector component of reference */
  34:mpc_ref.c     **** 
  35:mpc_ref.c     **** 	ref_compute_Rh_u_ref(ctl, Rh_u_ref, u_ref);
  36:mpc_ref.c     **** 	ref_compute_Qh_x_ref(ctl, Qh_x_ref, x_ref);
  37:mpc_ref.c     **** 	mtx_multiply_mtx_vec(Bh_T_Qh_x_ref, ctl->alm->fgm->Bh_T, Qh_x_ref,
  38:mpc_ref.c     **** 			MPC_HOR_INPUTS, MPC_HOR_STATES);
  39:mpc_ref.c     **** 	mtx_add(gr, Bh_T_Qh_x_ref, Rh_u_ref, MPC_HOR_INPUTS, 1);
  40:mpc_ref.c     **** 	mtx_scale(ctl->alm->fgm->groL, gr, *(ctl->alm->Linv), MPC_HOR_INPUTS, 1);
  41:mpc_ref.c     **** 
  42:mpc_ref.c     **** 	return;
  43:mpc_ref.c     **** }
  44:mpc_ref.c     **** 
  45:mpc_ref.c     **** /* TODO make a "thread safe" version of ref_compute_groL, such that it allows
  46:mpc_ref.c     ****  * the computation of groL for fixed references, i.e. it will not be called
  47:mpc_ref.c     ****  * at every sampling time, only once a change of operation point is required.
  48:mpc_ref.c     ****  * _computing_ groL is time consuming, and should be carried out by a low
  49:mpc_ref.c     ****  * priority thread, however _setting_ it must be made _atomically_ in the 
  50:mpc_ref.c     ****  * MPC controller hard real-time thread. 
  51:mpc_ref.c     ****  */
  52:mpc_ref.c     **** 
  53:mpc_ref.c     **** /* Definition of static functions */
  54:mpc_ref.c     **** 
  55:mpc_ref.c     **** /* compute Rh * u_ref
  56:mpc_ref.c     ****  * Rh is a block diagonal matrix of R */
  57:mpc_ref.c     **** void ref_compute_Rh_u_ref(struct mpc_ctl *ctl, real_t Rh_u_ref[],
  58:mpc_ref.c     **** 		const real_t u_ref[])
  59:mpc_ref.c     **** {
  60:mpc_ref.c     **** 	uint32_t i, ini;
  61:mpc_ref.c     **** 
  62:mpc_ref.c     **** 	for (i=0; i<MPC_HOR; i++) {
  63:mpc_ref.c     **** 		ini = i * MPC_INPUTS;
  64:mpc_ref.c     **** 		mtx_multiply_mtx_vec(Rh_u_ref + ini, ctl->wmx->R, u_ref + ini,
  65:mpc_ref.c     **** 				MPC_INPUTS, MPC_INPUTS);
  66:mpc_ref.c     **** 	}
  67:mpc_ref.c     **** }
  68:mpc_ref.c     **** 
  69:mpc_ref.c     **** /* compute Qh * x_ref
  70:mpc_ref.c     ****  * Qh is a block diagonal matrix of Q, the last block is P */
  71:mpc_ref.c     **** void ref_compute_Qh_x_ref(struct mpc_ctl *ctl, real_t Qh_x_ref[],
  72:mpc_ref.c     **** 		const real_t x_ref[])
  73:mpc_ref.c     **** {
  16              	 Function supports interworking.
  17              		@ args = 0, pretend = 0, frame = 0
  18              		@ frame_needed = 0, uses_anonymous_args = 0
  19              	.LVL0:
  20              		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
  21 0000 F0412DE9 	.LCFI0:
  22              		mov	r8, r0
  23 0004 0080A0E1 		sub	sp, sp, #4
  24 0008 04D04DE2 	.LCFI1:
  25              		.loc 1 73 0
  26              		mov	r5, r1
  27 000c 0150A0E1 		mov	r4, r2
  28 0010 0240A0E1 		mov	r6, #0
  29 0014 0060A0E3 	.LVL1:
  30              		mov	r7, #8
  31 0018 0870A0E3 		b	.L2
  32 001c 080000EA 	.LVL2:
  33              	.L12:
  34              		.loc 1 79 0
  74:mpc_ref.c     **** t x_ref[])
  75:mpc_ref.c     **** {
  76:mpc_ref.c     **** 	uint32_t i, ini;
  77:mpc_ref.c     **** 
  78:mpc_ref.c     **** 	for (i=0; i<MPC_HOR; i++) {
  79:mpc_ref.c     **** 		ini = i * MPC_STATES;
  35              		.loc 1 76 0
  36 0020 0CC098E5 		add	r6, r6, #1
  37              		.loc 1 79 0
  38 0024 016086E2 		ldr	r1, [ip, #0]
  39              	.LVL3:
  40 0028 00109CE5 		str	r7, [sp, #0]
  41              		bl	mtx_multiply_mtx_vec
  42 002c 00708DE5 		.loc 1 76 0
  43 0030 FEFFFFEB 		cmp	r6, #19
  44              		add	r5, r5, #64
  45 0034 130056E3 		add	r4, r4, #64
  46 0038 405085E2 		beq	.L11
  47 003c 404084E2 	.LVL4:
  48 0040 1000000A 	.L2:
  49              		.loc 1 78 0
  50              		cmp	r6, #17
  51              		.loc 1 79 0
  52 0044 110056E3 		mov	r0, r5
  53              		mov	r2, r4
  54 0048 0500A0E1 	.LVL5:
  55 004c 0420A0E1 		mov	r3, r7
  56              		.loc 1 78 0
  57 0050 0730A0E1 		bls	.L12
  58              		.loc 1 82 0
  59 0054 F1FFFF9A 		ldr	ip, [r8, #12]
  80:mpc_ref.c     **** _STATES;
  81:mpc_ref.c     **** 		if (i < (MPC_HOR - 1)) {
  82:mpc_ref.c     **** 			mtx_multiply_mtx_vec(Qh_x_ref + ini, ctl->wmx->Q, x_ref + ini,
  60              	ldr	r1, [ip, #8]
  61 0058 0CC098E5 	.LVL6:
  62 005c 0500A0E1 		mov	r3, r7
  63 0060 0420A0E1 		.loc 1 76 0
  64 0064 08109CE5 		add	r6, r6, #1
  65              		.loc 1 82 0
  66 0068 0730A0E1 		str	r7, [sp, #0]
  67              		bl	mtx_multiply_mtx_vec
  68 006c 016086E2 		.loc 1 76 0
  69              		cmp	r6, #19
  70 0070 00708DE5 		add	r5, r5, #64
  71 0074 FEFFFFEB 		add	r4, r4, #64
  72              		bne	.L2
  73 0078 130056E3 	.L11:
  74 007c 405085E2 		.loc 1 86 0
  75 0080 404084E2 		add	sp, sp, #4
  76 0084 EEFFFF1A 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
  77              		bx	lr
  83:mpc_ref.c     **** + ini,
  84:mpc_ref.c     **** 					MPC_STATES, MPC_STATES);
  85:mpc_ref.c     **** 		} else {
  86:mpc_ref.c     **** 			mtx_multiply_mtx_vec(Qh_x_ref + ini, ctl->wmx->P, x_ref + ini,
  78              	compute_Qh_x_ref, .-ref_compute_Qh_x_ref
  79 0088 04D08DE2 		.align	2
  80 008c F041BDE8 		.global	ref_compute_Rh_u_ref
  82              	ref_compute_Rh_u_ref:
  83              	.LFB4:
  84              		.loc 1 59 0
  85              		@ Function supports interworking.
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL7:
  89              		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
  90              	.LCFI2:
  91              		mov	r8, r0
  92              		sub	sp, sp, #4
  93              	.LCFI3:
  94 0094 F0412DE9 		.loc 1 59 0
  95              		mov	r7, r1
  96 0098 0080A0E1 		mov	r6, r2
  97 009c 04D04DE2 		mov	r4, #0
  98              		mov	r5, #3
  99              	.LVL8:
 100 00a0 0170A0E1 	.L14:
 101 00a4 0260A0E1 		.loc 1 64 0
 102 00a8 0040A0E3 		ldr	r3, [r8, #12]
 103 00ac 0350A0E3 		add	r0, r7, r4
 104              		ldr	r1, [r3, #4]
 105              		add	r2, r6, r4
 106              		mov	r3, r5
 107 00b0 0C3098E5 		add	r4, r4, #24
 108 00b4 040087E0 		str	r5, [sp, #0]
 109 00b8 041093E5 		bl	mtx_multiply_mtx_vec
 110 00bc 042086E0 		.loc 1 62 0
 111 00c0 0530A0E1 		cmp	r4, #456
 112 00c4 184084E2 		bne	.L14
 113 00c8 00508DE5 		.loc 1 67 0
 114 00cc FEFFFFEB 		add	sp, sp, #4
 115              		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 116 00d0 720F54E3 		bx	lr
 117 00d4 F5FFFF1A 	.LFE4:
 119 00d8 04D08DE2 		.align	2
 120 00dc F041BDE8 		.global	ref_compute_groL
 122              	ref_compute_groL:
 123              	.LFB3:
 124              		.loc 1 29 0
 125              		@ Function supports interworking.
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL9:
 129              		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 130              	.LCFI4:
 131              		.loc 1 35 0
 132              		ldr	r8, .L21
 133              		.loc 1 36 0
 134 00e4 F0412DE9 		ldr	r6, .L21+4
 135              		.loc 1 29 0
 136              		sub	sp, sp, #8
 137 00e8 A0809FE5 	.LCFI5:
 138              		.loc 1 29 0
 139 00ec A0609FE5 		mov	r5, r0
 140              		mov	r4, r1
 141 00f0 08D04DE2 		.loc 1 35 0
 142              		mov	r1, r8
 143              	.LVL10:
 144 00f4 0050A0E1 		bl	ref_compute_Rh_u_ref
 145 00f8 0140A0E1 	.LVL11:
 146              		.loc 1 36 0
 147 00fc 0810A0E1 		mov	r2, r4
 148              		mov	r0, r5
 149 0100 FEFFFFEB 		mov	r1, r6
 150              		bl	ref_compute_Qh_x_ref
 151              		.loc 1 37 0
 152 0104 0420A0E1 		ldr	r3, [r5, #20]
 153 0108 0500A0E1 		ldr	r4, .L21+8
 154 010c 0610A0E1 	.LVL12:
 155 0110 FEFFFFEB 		ldr	r2, [r3, #0]
 156              		.loc 1 39 0
 157 0114 143095E5 		ldr	r7, .L21+12
 158 0118 78409FE5 		.loc 1 37 0
 159              		ldr	r1, [r2, #24]
 160 011c 002093E5 		mov	ip, #152
 161              		mov	r2, r6
 162 0120 74709FE5 		mov	r0, r4
 163              		mov	r3, #57
 164 0124 181092E5 		str	ip, [sp, #0]
 165 0128 98C0A0E3 		bl	mtx_multiply_mtx_vec
 166 012c 0620A0E1 		.loc 1 39 0
 167 0130 0400A0E1 		mov	r1, r4
 168 0134 3930A0E3 		mov	r2, r8
 169 0138 00C08DE5 		mov	r4, #1
 170 013c FEFFFFEB 		mov	r0, r7
 171              		mov	r3, #57
 172 0140 0410A0E1 		str	r4, [sp, #0]
 173 0144 0820A0E1 		bl	mtx_add
 174 0148 0140A0E3 		.loc 1 40 0
 175 014c 0700A0E1 		ldr	r3, [r5, #20]
 176 0150 3930A0E3 		ldr	ip, [r3, #0]
 177 0154 00408DE5 		ldr	r1, [r3, #40]
 178 0158 FEFFFFEB 		ldr	r0, [ip, #8]
 179              		ldmia	r1, {r2-r3}
 180 015c 143095E5 		mov	ip, #57
 181 0160 00C093E5 		mov	r1, r7
 182 0164 281093E5 		str	ip, [sp, #0]
 183 0168 08009CE5 		str	r4, [sp, #4]
 184 016c 0C0091E8 		bl	mtx_scale
 185 0170 39C0A0E3 		.loc 1 43 0
 186 0174 0710A0E1 		add	sp, sp, #8
 187 0178 00C08DE5 		ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 188 017c 04408DE5 		bx	lr
 189 0180 FEFFFFEB 	.L22:
 190              		.align	2
 191 0184 08D08DE2 	.L21:
 192 0188 F041BDE8 		.word	Rh_u_ref.1448
 193 018c 1EFF2FE1 		.word	Qh_x_ref.1449
 194              		.word	Bh_T_Qh_x_ref.1450
 195              		.word	gr.1451
 196              	.LFE3:
 198 0194 90030000 		.align	2
 199 0198 C8010000 		.global	ref_compute_gxoL
 201              	ref_compute_gxoL:
 202              	.LFB2:
 203              		.loc 1 16 0
 204              		@ Function supports interworking.
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              	.LVL13:
 208              		stmfd	sp!, {r4, r5, r6, lr}
 209              	.LCFI6:
 210              		mov	r5, r0
 211              		sub	sp, sp, #4
 212              	.LCFI7:
 213 01a0 70402DE9 		.loc 1 16 0
 214              		mov	r6, r1
 215 01a4 0050A0E1 		.loc 1 19 0
 216 01a8 04D04DE2 		mov	r1, r2
 217              	.LVL14:
 218              		mov	r2, r3
 219 01ac 0160A0E1 	.LVL15:
 220              		bl	ref_compute_groL
 221 01b0 0210A0E1 	.LVL16:
 222              		.loc 1 20 0
 223 01b4 0320A0E1 		ldr	r3, [r5, #20]
 224              		ldr	r4, .L25
 225 01b8 FEFFFFEB 		ldr	r2, [r3, #0]
 226              		mov	r0, r4
 227              		ldr	r1, [r2, #20]
 228 01bc 143095E5 		mov	ip, #8
 229 01c0 48409FE5 		mov	r2, r6
 230 01c4 002093E5 		mov	r3, #57
 231 01c8 0400A0E1 		str	ip, [sp, #0]
 232 01cc 141092E5 		bl	mtx_multiply_mtx_vec
 233 01d0 08C0A0E3 		.loc 1 21 0
 234 01d4 0620A0E1 		ldr	r3, [r5, #20]
 235 01d8 3930A0E3 		ldr	r1, [r3, #0]
 236 01dc 00C08DE5 		mov	ip, #1
 237 01e0 FEFFFFEB 		ldmib	r1, {r0, r2}	@ phole ldm
 238              		mov	r3, #57
 239 01e4 143095E5 		mov	r1, r4
 240 01e8 001093E5 		str	ip, [sp, #0]
 241 01ec 01C0A0E3 		bl	mtx_substract
 242 01f0 050091E9 		.loc 1 24 0
 243 01f4 3930A0E3 		add	sp, sp, #4
 244 01f8 0410A0E1 		ldmfd	sp!, {r4, r5, r6, lr}
 245 01fc 00C08DE5 		bx	lr
 246 0200 FEFFFFEB 	.L26:
 247              		.align	2
 248 0204 04D08DE2 	.L25:
 249 0208 7040BDE8 		.word	GoL_x.1437
 250 020c 1EFF2FE1 	.LFE2:
 252              		.bss
 253              		.align	2
 254 0210 180A0000 	gr.1451:
 255              		.space	456
 256              		.align	2
 257              	Bh_T_Qh_x_ref.1450:
 258              		.space	456
 259              		.align	2
 260 0000 00000000 	Qh_x_ref.1449:
 260      00000000 
 260      00000000 
 260      00000000 
 260      00000000 
 261              		.space	1216
 262              		.align	2
 263 01c8 00000000 	Rh_u_ref.1448:
 263      00000000 
 263      00000000 
 263      00000000 
 263      00000000 
 264              		.space	456
 265              		.align	2
 266 0390 00000000 	GoL_x.1437:
 266      00000000 
 266      00000000 
 266      00000000 
 266      00000000 
 267              		.space	456
 268              		.section	.debug_frame,"",%progbits
 269 0850 00000000 	.Lframe0:
 269      00000000 
 269      00000000 
 269      00000000 
 269      00000000 
 270              		.4byte	.LECIE0-.LSCIE0
 271              	.LSCIE0:
 272 0a18 00000000 		.4byte	0xffffffff
 272      00000000 
 272      00000000 
 272      00000000 
 272      00000000 
 400              		.4byte	.LCFI0-.Ltext0
DEFINED SYMBOLS
                            *ABS*:00000000 mpc_ref.c
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:13     .text:00000000 ref_compute_Qh_x_ref
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:21     .text:00000000 $a
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:87     .text:00000094 ref_compute_Rh_u_ref
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:127    .text:000000e4 ref_compute_groL
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:197    .text:00000190 $d
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:268    .bss:00000850 Rh_u_ref.1448
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:265    .bss:00000390 Qh_x_ref.1449
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:262    .bss:000001c8 Bh_T_Qh_x_ref.1450
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:259    .bss:00000000 gr.1451
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:206    .text:000001a0 ref_compute_gxoL
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:213    .text:000001a0 $a
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:254    .text:00000210 $d
C:\Users\XY\AppData\Local\Temp/cc2Tbaaa.s:271    .bss:00000a18 GoL_x.1437

UNDEFINED SYMBOLS
mtx_multiply_mtx_vec
mtx_add
mtx_scale
mtx_substract
